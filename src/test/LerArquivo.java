package test;
import static org.junit.Assert.assertEquals;

import exceptions.ArquivoNaoEncontradoException;
import org.junit.Test;
import main.Parser;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class LerArquivo {

    @Test
    public void TesteLerArquivoSucessoAnalysisMemory() throws ArquivoNaoEncontradoException {
        Parser parser = new Parser();
        @SuppressWarnings("serial")
        List<List<Double>> array = new ArrayList<List<Double>>() {{

            add(Arrays.asList(34.63005828857422, 34.62224578857422, 34.62224578857422, 34.62224578857422, 34.62224578857422, 34.62224578857422, 34.62224578857422, 34.62224578857422, 34.62224578857422, 34.62224578857422, 34.62224578857422));
            add(Arrays.asList(35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594, 35.59007263183594));
            add(Arrays.asList(35.59031677246094, 35.59031677246094, 35.55113220214844, 35.537513732910156, 35.55113220214844, 35.55113220214844, 35.53749084472656, 35.59031677246094, 35.59031677246094, 35.55113220214844, 35.553192138671875));
            add(Arrays.asList(36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344, 36.65733337402344));
            add(Arrays.asList(37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422, 37.63884735107422));
            add(Arrays.asList(39.574554443359375, 39.574554443359375, 39.537864685058594, 39.574554443359375, 39.574554443359375, 39.574554443359375, 39.574554443359375, 39.574554443359375, 39.574554443359375, 39.574554443359375, 39.574554443359375));
            add(Arrays.asList(41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875));
            add(Arrays.asList(41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875));
            add(Arrays.asList(41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875, 41.617401123046875));
            add(Arrays.asList(44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344, 44.65733337402344));
            add(Arrays.asList(49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875, 49.617401123046875));
            add(Arrays.asList(27.553634643554688, 27.553665161132812, 27.553207397460938, 27.553665161132812, 27.55321502685547, 27.55315399169922, 27.553268432617188, 27.553207397460938, 27.55127716064453, 27.553184509277344, 27.553665161132812));
            add(Arrays.asList(27.53746795654297, 27.537437438964844, 27.53839111328125, 27.537437438964844, 27.537437438964844, 27.53746795654297, 27.53746795654297, 27.53839111328125, 27.537460327148438, 27.53746795654297, 27.537460327148438));
            add(Arrays.asList(46.99834442138672, 47.094459533691406, 47.07793426513672, 46.91382598876953, 47.08573913574219, 47.082122802734375, 47.079925537109375, 47.071144104003906, 46.99921417236328, 47.090492248535156, 46.910987854003906));
            add(Arrays.asList(85.93535614013672, 86.41481018066406, 87.74950408935547, 86.42205810546875, 88.19488525390625, 86.57553100585938, 85.738037109375, 86.074951171875, 86.42327880859375, 86.7900390625, 85.97779083251953));
            add(Arrays.asList(265.6123046875, 275.25634765625, 273.25341796875, 273.697265625, 265.091796875, 266.962890625, 271.42724609375, 265.06201171875, 265.19482421875, 267.552734375, 275.07666015625));
            add(Arrays.asList(619.75732421875, 585.64697265625, 597.697265625, 617.611328125, 611.6953125, 609.8193359375, 588.79931640625, 617.62646484375, 617.7587890625, 613.75927734375, 609.697265625));
            add(Arrays.asList(292.1605224609375, 298.0877914428711, 259.40924072265625, 296.4632568359375, 294.85009765625, 306.47003173828125, 294.8548583984375, 311.5275344848633, 301.19384765625, 294.99249267578125, 288.36924743652344));
            add(Arrays.asList(789.6953125, 1037.697265625, 1525.6953125, 1293.697265625, 1441.6005859375, 805.6953125, 1487.6953125, 1605.6953125, 1397.697265625, 647.6953125, 1433.10009765625));
            add(Arrays.asList(2545.6953125, 2563.697265625, 2507.6953125, 2415.6953125, 2637.697265625, 2477.697265625, 2579.6953125, 2359.697265625, 2575.697265625, 2065.697265625, 2437.6953125));
            add(Arrays.asList(4891.6953125, 4865.6953125, 4861.6953125, 4573.6953125, 4837.6953125, 4523.6953125, 4865.6953125, 4855.6953125, 4559.697265625, 4829.697265625, 4421.6953125));
        }};

        parser.lerArquivo("src/assets/analysisMemory.out");

        assertEquals(array, parser.getBuffer());
    }

    @Test
    public void TesteLerArquivoSucessoAnalysisTime() throws ArquivoNaoEncontradoException {
        Parser parser = new Parser();
        @SuppressWarnings("serial")
        List<List<Double>> array = new ArrayList<List<Double>>() {{
            add(Arrays.asList(439d, 705d, 738d, 729d, 752d, 740d, 658d, 713d, 765d, 710d));
            add(Arrays.asList(470d, 828d, 760d, 668d, 884d, 721d, 720d, 802d, 777d, 735d));
            add(Arrays.asList(446d, 789d, 763d, 692d, 910d, 966d, 751d, 1002d, 720d, 752d));
            add(Arrays.asList(457d, 852d, 739d, 710d, 763d, 838d, 761d, 763d, 742d, 699d));
            add(Arrays.asList(472d, 734d, 726d, 708d, 817d, 811d, 763d, 757d, 789d, 678d));
            add(Arrays.asList(470d, 760d, 701d, 764d, 849d, 747d, 771d, 884d, 757d, 669d));
            add(Arrays.asList(462d, 737d, 714d, 729d, 788d, 836d, 687d, 772d, 694d, 776d));
            add(Arrays.asList(509d, 696d, 738d, 710d, 758d, 763d, 689d, 764d, 804d, 717d));
            add(Arrays.asList(500d, 753d, 808d, 778d, 739d, 812d, 724d, 846d, 740d, 746d));
            add(Arrays.asList(493d, 740d, 717d, 728d, 839d, 722d, 736d, 810d, 703d, 756d));
            add(Arrays.asList(466d, 1013d, 748d, 773d, 809d, 730d, 727d, 787d, 771d, 710d));
            add(Arrays.asList(514d, 1060d, 771d, 754d, 766d, 903d, 792d, 930d, 829d, 856d));
            add(Arrays.asList(506d, 784d, 977d, 904d, 872d, 774d, 875d, 811d, 774d, 756d));
            add(Arrays.asList(676d, 876d, 905d, 762d, 929d, 825d, 728d, 853d, 822d, 798d));
            add(Arrays.asList(919d, 804d, 783d, 769d, 760d, 908d, 887d, 802d, 783d, 797d));
            add(Arrays.asList(897d, 896d, 805d, 839d, 914d, 834d, 853d, 996d, 913d, 822d));
            add(Arrays.asList(862d, 846d, 970d, 999d, 982d, 1003d, 848d, 819d, 871d, 925d));
            add(Arrays.asList(865d, 810d, 791d, 865d, 830d, 851d, 860d, 847d, 855d, 892d));
            add(Arrays.asList(835d, 875d, 866d, 875d, 820d, 833d, 928d, 901d, 870d, 836d));
            add(Arrays.asList(874d, 896d, 809d, 827d, 962d, 849d, 873d, 907d, 845d, 896d));
        }};

        parser.lerArquivo("src/assets/analysisTime.out");

        assertEquals(array, parser.getBuffer());
    }

    @Test
    public void TesteLerArquivoVazio() throws ArquivoNaoEncontradoException {
        Parser parser = new Parser();

        List<List<Double>> array = new ArrayList<List<Double>>();

        parser.lerArquivo("src/assets/arquivoVazio.out");

        assertEquals(array, parser.getBuffer());
    }

    @Test(expected=ArquivoNaoEncontradoException.class)
    public void TesteLerArquivoInexistente() throws ArquivoNaoEncontradoException {
        Parser parser = new Parser();

        parser.lerArquivo("src/assets/arquivoInexistente.out");
    }


}
